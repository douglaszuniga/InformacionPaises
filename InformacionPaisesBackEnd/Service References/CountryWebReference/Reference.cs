//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace InformacionPaisesBackEnd.CountryWebReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="CountryWebReference.countrySoap")]
    public interface countrySoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCountryByCountryCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCountryByCountryCode(string CountryCode, System.AsyncCallback callback, object asyncState);
        
        string EndGetCountryByCountryCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetISD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetISD(string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetISD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCountries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCountries(System.AsyncCallback callback, object asyncState);
        
        string EndGetCountries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCurrencyCodeByCurrencyName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCurrencyCodeByCurrencyName(string CurrencyName, System.AsyncCallback callback, object asyncState);
        
        string EndGetCurrencyCodeByCurrencyName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetISOCountryCodeByCountyName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetISOCountryCodeByCountyName(string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetISOCountryCodeByCountyName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCurrencyCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCurrencyCode(System.AsyncCallback callback, object asyncState);
        
        string EndGetCurrencyCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCountryByCurrencyCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCountryByCurrencyCode(string CurrencyCode, System.AsyncCallback callback, object asyncState);
        
        string EndGetCountryByCurrencyCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCurrencies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCurrencies(System.AsyncCallback callback, object asyncState);
        
        string EndGetCurrencies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCurrencyByCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCurrencyByCountry(string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetCurrencyByCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetGMTbyCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetGMTbyCountry(string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetGMTbyCountry(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface countrySoapChannel : InformacionPaisesBackEnd.CountryWebReference.countrySoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountryByCountryCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountryByCountryCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetISDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetISDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrencyCodeByCurrencyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrencyCodeByCurrencyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetISOCountryCodeByCountyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetISOCountryCodeByCountyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrencyCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrencyCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountryByCurrencyCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountryByCurrencyCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrenciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrenciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrencyByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrencyByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGMTbyCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGMTbyCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class countrySoapClient : System.ServiceModel.ClientBase<InformacionPaisesBackEnd.CountryWebReference.countrySoap>, InformacionPaisesBackEnd.CountryWebReference.countrySoap {
        
        private BeginOperationDelegate onBeginGetCountryByCountryCodeDelegate;
        
        private EndOperationDelegate onEndGetCountryByCountryCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountryByCountryCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetISDDelegate;
        
        private EndOperationDelegate onEndGetISDDelegate;
        
        private System.Threading.SendOrPostCallback onGetISDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountriesDelegate;
        
        private EndOperationDelegate onEndGetCountriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrencyCodeByCurrencyNameDelegate;
        
        private EndOperationDelegate onEndGetCurrencyCodeByCurrencyNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrencyCodeByCurrencyNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetISOCountryCodeByCountyNameDelegate;
        
        private EndOperationDelegate onEndGetISOCountryCodeByCountyNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetISOCountryCodeByCountyNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrencyCodeDelegate;
        
        private EndOperationDelegate onEndGetCurrencyCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrencyCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountryByCurrencyCodeDelegate;
        
        private EndOperationDelegate onEndGetCountryByCurrencyCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountryByCurrencyCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrenciesDelegate;
        
        private EndOperationDelegate onEndGetCurrenciesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrenciesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrencyByCountryDelegate;
        
        private EndOperationDelegate onEndGetCurrencyByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrencyByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGMTbyCountryDelegate;
        
        private EndOperationDelegate onEndGetGMTbyCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetGMTbyCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public countrySoapClient() {
        }
        
        public countrySoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public countrySoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public countrySoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public countrySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCountryByCountryCodeCompletedEventArgs> GetCountryByCountryCodeCompleted;
        
        public event System.EventHandler<GetISDCompletedEventArgs> GetISDCompleted;
        
        public event System.EventHandler<GetCountriesCompletedEventArgs> GetCountriesCompleted;
        
        public event System.EventHandler<GetCurrencyCodeByCurrencyNameCompletedEventArgs> GetCurrencyCodeByCurrencyNameCompleted;
        
        public event System.EventHandler<GetISOCountryCodeByCountyNameCompletedEventArgs> GetISOCountryCodeByCountyNameCompleted;
        
        public event System.EventHandler<GetCurrencyCodeCompletedEventArgs> GetCurrencyCodeCompleted;
        
        public event System.EventHandler<GetCountryByCurrencyCodeCompletedEventArgs> GetCountryByCurrencyCodeCompleted;
        
        public event System.EventHandler<GetCurrenciesCompletedEventArgs> GetCurrenciesCompleted;
        
        public event System.EventHandler<GetCurrencyByCountryCompletedEventArgs> GetCurrencyByCountryCompleted;
        
        public event System.EventHandler<GetGMTbyCountryCompletedEventArgs> GetGMTbyCountryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetCountryByCountryCode(string CountryCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountryByCountryCode(CountryCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetCountryByCountryCode(System.IAsyncResult result) {
            return base.Channel.EndGetCountryByCountryCode(result);
        }
        
        private System.IAsyncResult OnBeginGetCountryByCountryCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryCode = ((string)(inValues[0]));
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetCountryByCountryCode(CountryCode, callback, asyncState);
        }
        
        private object[] OnEndGetCountryByCountryCode(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetCountryByCountryCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountryByCountryCodeCompleted(object state) {
            if ((this.GetCountryByCountryCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountryByCountryCodeCompleted(this, new GetCountryByCountryCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountryByCountryCodeAsync(string CountryCode) {
            this.GetCountryByCountryCodeAsync(CountryCode, null);
        }
        
        public void GetCountryByCountryCodeAsync(string CountryCode, object userState) {
            if ((this.onBeginGetCountryByCountryCodeDelegate == null)) {
                this.onBeginGetCountryByCountryCodeDelegate = new BeginOperationDelegate(this.OnBeginGetCountryByCountryCode);
            }
            if ((this.onEndGetCountryByCountryCodeDelegate == null)) {
                this.onEndGetCountryByCountryCodeDelegate = new EndOperationDelegate(this.OnEndGetCountryByCountryCode);
            }
            if ((this.onGetCountryByCountryCodeCompletedDelegate == null)) {
                this.onGetCountryByCountryCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountryByCountryCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountryByCountryCodeDelegate, new object[] {
                        CountryCode}, this.onEndGetCountryByCountryCodeDelegate, this.onGetCountryByCountryCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetISD(string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetISD(CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetISD(System.IAsyncResult result) {
            return base.Channel.EndGetISD(result);
        }
        
        private System.IAsyncResult OnBeginGetISD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetISD(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetISD(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetISD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetISDCompleted(object state) {
            if ((this.GetISDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetISDCompleted(this, new GetISDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetISDAsync(string CountryName) {
            this.GetISDAsync(CountryName, null);
        }
        
        public void GetISDAsync(string CountryName, object userState) {
            if ((this.onBeginGetISDDelegate == null)) {
                this.onBeginGetISDDelegate = new BeginOperationDelegate(this.OnBeginGetISD);
            }
            if ((this.onEndGetISDDelegate == null)) {
                this.onEndGetISDDelegate = new EndOperationDelegate(this.OnEndGetISD);
            }
            if ((this.onGetISDCompletedDelegate == null)) {
                this.onGetISDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetISDCompleted);
            }
            base.InvokeAsync(this.onBeginGetISDDelegate, new object[] {
                        CountryName}, this.onEndGetISDDelegate, this.onGetISDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetCountries(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountries(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetCountries(System.IAsyncResult result) {
            return base.Channel.EndGetCountries(result);
        }
        
        private System.IAsyncResult OnBeginGetCountries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetCountries(callback, asyncState);
        }
        
        private object[] OnEndGetCountries(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetCountries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountriesCompleted(object state) {
            if ((this.GetCountriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountriesCompleted(this, new GetCountriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountriesAsync() {
            this.GetCountriesAsync(null);
        }
        
        public void GetCountriesAsync(object userState) {
            if ((this.onBeginGetCountriesDelegate == null)) {
                this.onBeginGetCountriesDelegate = new BeginOperationDelegate(this.OnBeginGetCountries);
            }
            if ((this.onEndGetCountriesDelegate == null)) {
                this.onEndGetCountriesDelegate = new EndOperationDelegate(this.OnEndGetCountries);
            }
            if ((this.onGetCountriesCompletedDelegate == null)) {
                this.onGetCountriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountriesDelegate, null, this.onEndGetCountriesDelegate, this.onGetCountriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetCurrencyCodeByCurrencyName(string CurrencyName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrencyCodeByCurrencyName(CurrencyName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetCurrencyCodeByCurrencyName(System.IAsyncResult result) {
            return base.Channel.EndGetCurrencyCodeByCurrencyName(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrencyCodeByCurrencyName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CurrencyName = ((string)(inValues[0]));
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetCurrencyCodeByCurrencyName(CurrencyName, callback, asyncState);
        }
        
        private object[] OnEndGetCurrencyCodeByCurrencyName(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetCurrencyCodeByCurrencyName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrencyCodeByCurrencyNameCompleted(object state) {
            if ((this.GetCurrencyCodeByCurrencyNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrencyCodeByCurrencyNameCompleted(this, new GetCurrencyCodeByCurrencyNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrencyCodeByCurrencyNameAsync(string CurrencyName) {
            this.GetCurrencyCodeByCurrencyNameAsync(CurrencyName, null);
        }
        
        public void GetCurrencyCodeByCurrencyNameAsync(string CurrencyName, object userState) {
            if ((this.onBeginGetCurrencyCodeByCurrencyNameDelegate == null)) {
                this.onBeginGetCurrencyCodeByCurrencyNameDelegate = new BeginOperationDelegate(this.OnBeginGetCurrencyCodeByCurrencyName);
            }
            if ((this.onEndGetCurrencyCodeByCurrencyNameDelegate == null)) {
                this.onEndGetCurrencyCodeByCurrencyNameDelegate = new EndOperationDelegate(this.OnEndGetCurrencyCodeByCurrencyName);
            }
            if ((this.onGetCurrencyCodeByCurrencyNameCompletedDelegate == null)) {
                this.onGetCurrencyCodeByCurrencyNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrencyCodeByCurrencyNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrencyCodeByCurrencyNameDelegate, new object[] {
                        CurrencyName}, this.onEndGetCurrencyCodeByCurrencyNameDelegate, this.onGetCurrencyCodeByCurrencyNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetISOCountryCodeByCountyName(string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetISOCountryCodeByCountyName(CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetISOCountryCodeByCountyName(System.IAsyncResult result) {
            return base.Channel.EndGetISOCountryCodeByCountyName(result);
        }
        
        private System.IAsyncResult OnBeginGetISOCountryCodeByCountyName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetISOCountryCodeByCountyName(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetISOCountryCodeByCountyName(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetISOCountryCodeByCountyName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetISOCountryCodeByCountyNameCompleted(object state) {
            if ((this.GetISOCountryCodeByCountyNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetISOCountryCodeByCountyNameCompleted(this, new GetISOCountryCodeByCountyNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetISOCountryCodeByCountyNameAsync(string CountryName) {
            this.GetISOCountryCodeByCountyNameAsync(CountryName, null);
        }
        
        public void GetISOCountryCodeByCountyNameAsync(string CountryName, object userState) {
            if ((this.onBeginGetISOCountryCodeByCountyNameDelegate == null)) {
                this.onBeginGetISOCountryCodeByCountyNameDelegate = new BeginOperationDelegate(this.OnBeginGetISOCountryCodeByCountyName);
            }
            if ((this.onEndGetISOCountryCodeByCountyNameDelegate == null)) {
                this.onEndGetISOCountryCodeByCountyNameDelegate = new EndOperationDelegate(this.OnEndGetISOCountryCodeByCountyName);
            }
            if ((this.onGetISOCountryCodeByCountyNameCompletedDelegate == null)) {
                this.onGetISOCountryCodeByCountyNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetISOCountryCodeByCountyNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetISOCountryCodeByCountyNameDelegate, new object[] {
                        CountryName}, this.onEndGetISOCountryCodeByCountyNameDelegate, this.onGetISOCountryCodeByCountyNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetCurrencyCode(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrencyCode(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetCurrencyCode(System.IAsyncResult result) {
            return base.Channel.EndGetCurrencyCode(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrencyCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetCurrencyCode(callback, asyncState);
        }
        
        private object[] OnEndGetCurrencyCode(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetCurrencyCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrencyCodeCompleted(object state) {
            if ((this.GetCurrencyCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrencyCodeCompleted(this, new GetCurrencyCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrencyCodeAsync() {
            this.GetCurrencyCodeAsync(null);
        }
        
        public void GetCurrencyCodeAsync(object userState) {
            if ((this.onBeginGetCurrencyCodeDelegate == null)) {
                this.onBeginGetCurrencyCodeDelegate = new BeginOperationDelegate(this.OnBeginGetCurrencyCode);
            }
            if ((this.onEndGetCurrencyCodeDelegate == null)) {
                this.onEndGetCurrencyCodeDelegate = new EndOperationDelegate(this.OnEndGetCurrencyCode);
            }
            if ((this.onGetCurrencyCodeCompletedDelegate == null)) {
                this.onGetCurrencyCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrencyCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrencyCodeDelegate, null, this.onEndGetCurrencyCodeDelegate, this.onGetCurrencyCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetCountryByCurrencyCode(string CurrencyCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountryByCurrencyCode(CurrencyCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetCountryByCurrencyCode(System.IAsyncResult result) {
            return base.Channel.EndGetCountryByCurrencyCode(result);
        }
        
        private System.IAsyncResult OnBeginGetCountryByCurrencyCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CurrencyCode = ((string)(inValues[0]));
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetCountryByCurrencyCode(CurrencyCode, callback, asyncState);
        }
        
        private object[] OnEndGetCountryByCurrencyCode(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetCountryByCurrencyCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountryByCurrencyCodeCompleted(object state) {
            if ((this.GetCountryByCurrencyCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountryByCurrencyCodeCompleted(this, new GetCountryByCurrencyCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountryByCurrencyCodeAsync(string CurrencyCode) {
            this.GetCountryByCurrencyCodeAsync(CurrencyCode, null);
        }
        
        public void GetCountryByCurrencyCodeAsync(string CurrencyCode, object userState) {
            if ((this.onBeginGetCountryByCurrencyCodeDelegate == null)) {
                this.onBeginGetCountryByCurrencyCodeDelegate = new BeginOperationDelegate(this.OnBeginGetCountryByCurrencyCode);
            }
            if ((this.onEndGetCountryByCurrencyCodeDelegate == null)) {
                this.onEndGetCountryByCurrencyCodeDelegate = new EndOperationDelegate(this.OnEndGetCountryByCurrencyCode);
            }
            if ((this.onGetCountryByCurrencyCodeCompletedDelegate == null)) {
                this.onGetCountryByCurrencyCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountryByCurrencyCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountryByCurrencyCodeDelegate, new object[] {
                        CurrencyCode}, this.onEndGetCountryByCurrencyCodeDelegate, this.onGetCountryByCurrencyCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetCurrencies(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrencies(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetCurrencies(System.IAsyncResult result) {
            return base.Channel.EndGetCurrencies(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrencies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetCurrencies(callback, asyncState);
        }
        
        private object[] OnEndGetCurrencies(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetCurrencies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrenciesCompleted(object state) {
            if ((this.GetCurrenciesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrenciesCompleted(this, new GetCurrenciesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrenciesAsync() {
            this.GetCurrenciesAsync(null);
        }
        
        public void GetCurrenciesAsync(object userState) {
            if ((this.onBeginGetCurrenciesDelegate == null)) {
                this.onBeginGetCurrenciesDelegate = new BeginOperationDelegate(this.OnBeginGetCurrencies);
            }
            if ((this.onEndGetCurrenciesDelegate == null)) {
                this.onEndGetCurrenciesDelegate = new EndOperationDelegate(this.OnEndGetCurrencies);
            }
            if ((this.onGetCurrenciesCompletedDelegate == null)) {
                this.onGetCurrenciesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrenciesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrenciesDelegate, null, this.onEndGetCurrenciesDelegate, this.onGetCurrenciesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetCurrencyByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrencyByCountry(CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetCurrencyByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetCurrencyByCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrencyByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetCurrencyByCountry(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetCurrencyByCountry(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetCurrencyByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrencyByCountryCompleted(object state) {
            if ((this.GetCurrencyByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrencyByCountryCompleted(this, new GetCurrencyByCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrencyByCountryAsync(string CountryName) {
            this.GetCurrencyByCountryAsync(CountryName, null);
        }
        
        public void GetCurrencyByCountryAsync(string CountryName, object userState) {
            if ((this.onBeginGetCurrencyByCountryDelegate == null)) {
                this.onBeginGetCurrencyByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetCurrencyByCountry);
            }
            if ((this.onEndGetCurrencyByCountryDelegate == null)) {
                this.onEndGetCurrencyByCountryDelegate = new EndOperationDelegate(this.OnEndGetCurrencyByCountry);
            }
            if ((this.onGetCurrencyByCountryCompletedDelegate == null)) {
                this.onGetCurrencyByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrencyByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrencyByCountryDelegate, new object[] {
                        CountryName}, this.onEndGetCurrencyByCountryDelegate, this.onGetCurrencyByCountryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InformacionPaisesBackEnd.CountryWebReference.countrySoap.BeginGetGMTbyCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGMTbyCountry(CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string InformacionPaisesBackEnd.CountryWebReference.countrySoap.EndGetGMTbyCountry(System.IAsyncResult result) {
            return base.Channel.EndGetGMTbyCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetGMTbyCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).BeginGetGMTbyCountry(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetGMTbyCountry(System.IAsyncResult result) {
            string retVal = ((InformacionPaisesBackEnd.CountryWebReference.countrySoap)(this)).EndGetGMTbyCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGMTbyCountryCompleted(object state) {
            if ((this.GetGMTbyCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGMTbyCountryCompleted(this, new GetGMTbyCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGMTbyCountryAsync(string CountryName) {
            this.GetGMTbyCountryAsync(CountryName, null);
        }
        
        public void GetGMTbyCountryAsync(string CountryName, object userState) {
            if ((this.onBeginGetGMTbyCountryDelegate == null)) {
                this.onBeginGetGMTbyCountryDelegate = new BeginOperationDelegate(this.OnBeginGetGMTbyCountry);
            }
            if ((this.onEndGetGMTbyCountryDelegate == null)) {
                this.onEndGetGMTbyCountryDelegate = new EndOperationDelegate(this.OnEndGetGMTbyCountry);
            }
            if ((this.onGetGMTbyCountryCompletedDelegate == null)) {
                this.onGetGMTbyCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGMTbyCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetGMTbyCountryDelegate, new object[] {
                        CountryName}, this.onEndGetGMTbyCountryDelegate, this.onGetGMTbyCountryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override InformacionPaisesBackEnd.CountryWebReference.countrySoap CreateChannel() {
            return new countrySoapClientChannel(this);
        }
        
        private class countrySoapClientChannel : ChannelBase<InformacionPaisesBackEnd.CountryWebReference.countrySoap>, InformacionPaisesBackEnd.CountryWebReference.countrySoap {
            
            public countrySoapClientChannel(System.ServiceModel.ClientBase<InformacionPaisesBackEnd.CountryWebReference.countrySoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCountryByCountryCode(string CountryCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CountryCode;
                System.IAsyncResult _result = base.BeginInvoke("GetCountryByCountryCode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCountryByCountryCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCountryByCountryCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetISD(string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetISD", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetISD(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetISD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountries(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCountries", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCountries(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCountries", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrencyCodeByCurrencyName(string CurrencyName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CurrencyName;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrencyCodeByCurrencyName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCurrencyCodeByCurrencyName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCurrencyCodeByCurrencyName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetISOCountryCodeByCountyName(string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetISOCountryCodeByCountyName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetISOCountryCodeByCountyName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetISOCountryCodeByCountyName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrencyCode(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCurrencyCode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCurrencyCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCurrencyCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountryByCurrencyCode(string CurrencyCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CurrencyCode;
                System.IAsyncResult _result = base.BeginInvoke("GetCountryByCurrencyCode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCountryByCurrencyCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCountryByCurrencyCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrencies(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCurrencies", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCurrencies(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCurrencies", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrencyByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrencyByCountry", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCurrencyByCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCurrencyByCountry", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGMTbyCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetGMTbyCountry", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetGMTbyCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetGMTbyCountry", _args, result)));
                return _result;
            }
        }
    }
}
